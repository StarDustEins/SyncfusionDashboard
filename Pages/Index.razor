@page "/"
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Charts
@using System.Runtime.InteropServices
@using Syncfusion.Blazor.Calendars

<PageTitle>Dashboard</PageTitle>

<div class="control-section">
    <SfDashboardLayout @ref="dashboardObject" Columns="10" CellSpacing="@(new double[] { 15, 15 })" CellAspectRatio="0.9">
        <DashboardLayoutPanels>
            <DashboardLayoutPanel Column="0" Row="0" SizeX="2" SizeY="1">
                <ContentTemplate>
                    <div class="root-container">
                        <div class="item-container bed-side-settle">
                            <p>@(Math.Round(100.0 * 30 / 90, 2))%</p>
                            <div class="auto-left">
                                <span class="income-icon e-icon"></span>
                            </div>
                        </div>
                        <div class="bottom-container">
                            <p>床旁结算率</p>
                        </div>
                    </div>
                </ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Column="2" Row="0" SizeX="2" SizeY="1">
                <ContentTemplate>
                    <div class="root-container">
                        <div class="item-container bed-side-register">
                            <p>21</p>
                            <div class="auto-left">
                                <span class="expense-icon e-icon"></span>
                            </div>
                        </div>
                        <div class="bottom-container">
                            <p>床旁结算人次</p>
                        </div>
                    </div>
                </ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Column="4" Row="0" SizeX="2" SizeY="1">
                <ContentTemplate>
                    <div class="root-container">
                        <div class="item-container window-settle">
                            <p>@(Math.Round(100.0 * 30 / 90, 2))%</p>
                            <div class="auto-left">
                                <span class="balance-icon e-icon"></span>
                            </div>
                        </div>
                        <div class="bottom-container">
                            <p>床旁登记率</p>
                        </div>
                    </div>
                </ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Column="6" Row="0" SizeX="2" SizeY="1">
                <ContentTemplate>
                    <div class="root-container">
                        <div class="item-container window-register">
                            <p>35</p>
                            <div class="auto-left">
                                <span class="transaction-icon e-icon"></span>
                            </div>
                        </div>
                        <div class="bottom-container">
                            <p>床旁登记人次</p>
                        </div>
                    </div>
                </ContentTemplate>
            </DashboardLayoutPanel>
            <DashboardLayoutPanel Column="8" Row="0" SizeX="2" SizeY="1">
                <ContentTemplate>
                    <div class="root-container">
                        <div class="item-container expense">
                            <p>35</p>
                            <div class="auto-left">
                                <span class="balance-icon e-icon"></span>
                            </div>
                        </div>
                        <div class="bottom-container">
                            <p>床旁登记人次</p>
                        </div>
                    </div>
                </ContentTemplate>
            </DashboardLayoutPanel>


            <DashboardLayoutPanel Column="0" Row="1" SizeX="8" SizeY="3">
                <HeaderTemplate>
                    <span class="title">登记分时间数据</span>
                </HeaderTemplate>
                <ContentTemplate>
                    <SfChart Width="90%">
                        <ChartArea>
                            <ChartAreaBorder Width="0"></ChartAreaBorder>
                        </ChartArea>
                        @* <ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents> *@
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                        </ChartPrimaryXAxis>
                        <ChartPrimaryYAxis Title="业务总量" RangePadding="ChartRangePadding.Round">
                            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                        </ChartPrimaryYAxis>
                        <ChartSeriesCollection>
                            <ChartSeries ColumnWidth="0.5" DataSource="@gg" XName="Hour" YName="WindowRegisterCount" Width="2" Name="窗口登记量" Type="ChartSeriesType.StackingColumn">
                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" Name="TextMapping">
                                        <ChartDataLabelFont Size="9px" FontWeight="600"></ChartDataLabelFont>
                                    </ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                            <ChartSeries ColumnWidth="0.5" DataSource="@gg" XName="Hour" YName="BedSideRegisterCount" Width="2" Name="床旁登记量" Type="ChartSeriesType.StackingColumn">
                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" Name="TextMapping">
                                        <ChartDataLabelFont Size="9px" FontWeight="600"></ChartDataLabelFont>
                                    </ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                            <ChartSeries ColumnWidth="0.5" DataSource="@gg" XName="Hour" YName="WindowSettleCount" Width="2" Name="窗口结算量" Type="ChartSeriesType.StackingColumn">
                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" Name="TextMapping">
                                        <ChartDataLabelFont Size="9px" FontWeight="600"></ChartDataLabelFont>
                                    </ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                            <ChartSeries ColumnWidth="0.5" DataSource="@gg" XName="Hour" YName="BedSideSettleCount" Width="2" Name="床旁结算量" Type="ChartSeriesType.StackingColumn">
                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" Name="TextMapping">
                                        <ChartDataLabelFont Size="9px" FontWeight="600"></ChartDataLabelFont>
                                    </ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                    </SfChart>
                </ContentTemplate>
            </DashboardLayoutPanel>
            
            <DashboardLayoutPanel Column="8" Row="1" SizeX="2" SizeY="5">
                <HeaderTemplate>
                    <span class="title">科室开展情况</span>
                </HeaderTemplate>
                <ContentTemplate>
                    <SfChart  Width="90%">
                        <ChartArea>
                            <ChartAreaBorder Width="0"></ChartAreaBorder>
                        </ChartArea>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        </ChartPrimaryXAxis>
                        <ChartPrimaryYAxis  LabelFormat="{value}%" EdgeLabelPlacement="EdgeLabelPlacement.Shift" RangePadding="ChartRangePadding.None">
                            <ChartAxisMajorTickLines Width="1"></ChartAxisMajorTickLines>
                            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                        </ChartPrimaryYAxis>
                        <ChartSeriesCollection>
                            <ChartSeries ColumnWidth="0.6" DataSource="@DeptUsage" XName="DeptName" YName="BedSideRegisterRate" Width="2" Name="床旁登记率" Type="ChartSeriesType.Bar">
                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" >
                                        <ChartDataLabelFont Size="9px" FontWeight="600"></ChartDataLabelFont>
                                    </ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                            <ChartSeries ColumnWidth="0.6" DataSource="@DeptUsage" XName="DeptName" YName="BedSideSettleRate" Width="2" Name="床旁结算率" Type="ChartSeriesType.Bar">
                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                            </ChartSeries>
                        </ChartSeriesCollection>
                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                    </SfChart>
                </ContentTemplate>
            </DashboardLayoutPanel>
            
            <DashboardLayoutPanel Column="0" Row="9" SizeX="5" SizeY="2">
                <HeaderTemplate>
                    <span class="title">出院情况总览</span>
                </HeaderTemplate>
                <ContentTemplate>
                    <SfAccumulationChart EnableAnimation="true">
                        <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                        <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@FunnelChartPoints" XName="InterviewProcess" YName="Candidates"
                                                     Type="AccumulationType.Funnel" Explode="true" Width="70%" Height="100%" NeckWidth="20%" NeckHeight="30%">
                                <AccumulationDataLabelSettings Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
                                    <AccumulationChartConnector Length="5%"></AccumulationChartConnector>
                                    <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                                </AccumulationDataLabelSettings>
                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>
                    </SfAccumulationChart>
                </ContentTemplate>
            </DashboardLayoutPanel>
        </DashboardLayoutPanels>
    </SfDashboardLayout>
</div>

@code {
    // dashboard 参数
    SfDashboardLayout dashboardObject;
    private Theme Theme { get; set; }

    private List<HourlyData> hourly = new List<HourlyData>
    {
        new HourlyData { Date = "2022-01-01", Hour = "07", DeptName = "心血管内科", WindowRegisterCount = 4, WindowSettleCount = 7, BedSideRegisterCount = 12, BedSideSettleCount = 40 },
        new HourlyData { Date = "2022-01-01", Hour = "08", DeptName = "心血管内科", WindowRegisterCount = 5, WindowSettleCount = 4, BedSideRegisterCount = 42, BedSideSettleCount = 20 },
        new HourlyData { Date = "2022-01-01", Hour = "09", DeptName = "心血管内科", WindowRegisterCount = 6, WindowSettleCount = 1, BedSideRegisterCount = 42, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "10", DeptName = "心血管内科", WindowRegisterCount = 12, WindowSettleCount = 21, BedSideRegisterCount = 12, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "11", DeptName = "心血管内科", WindowRegisterCount = 53, WindowSettleCount = 31, BedSideRegisterCount = 20, BedSideSettleCount = 12 },
        new HourlyData { Date = "2022-01-01", Hour = "12", DeptName = "心血管内科", WindowRegisterCount = 55, WindowSettleCount = 22, BedSideRegisterCount = 30, BedSideSettleCount = 9 },
        new HourlyData { Date = "2022-01-01", Hour = "13", DeptName = "心血管内科", WindowRegisterCount = 4, WindowSettleCount = 7, BedSideRegisterCount = 12, BedSideSettleCount = 40 },
        new HourlyData { Date = "2022-01-01", Hour = "14", DeptName = "心血管内科", WindowRegisterCount = 5, WindowSettleCount = 4, BedSideRegisterCount = 42, BedSideSettleCount = 20 },
        new HourlyData { Date = "2022-01-01", Hour = "15", DeptName = "心血管内科", WindowRegisterCount = 6, WindowSettleCount = 1, BedSideRegisterCount = 42, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "16", DeptName = "心血管内科", WindowRegisterCount = 12, WindowSettleCount = 21, BedSideRegisterCount = 12, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "17", DeptName = "心血管内科", WindowRegisterCount = 53, WindowSettleCount = 31, BedSideRegisterCount = 20, BedSideSettleCount = 12 },
        new HourlyData { Date = "2022-01-01", Hour = "18", DeptName = "心血管内科", WindowRegisterCount = 55, WindowSettleCount = 22, BedSideRegisterCount = 30, BedSideSettleCount = 9 },
        new HourlyData { Date = "2022-01-01", Hour = "07", DeptName = "泌尿外科", WindowRegisterCount = 4, WindowSettleCount = 7, BedSideRegisterCount = 12, BedSideSettleCount = 40 },
        new HourlyData { Date = "2022-01-01", Hour = "08", DeptName = "泌尿外科", WindowRegisterCount = 5, WindowSettleCount = 4, BedSideRegisterCount = 42, BedSideSettleCount = 20 },
        new HourlyData { Date = "2022-01-01", Hour = "09", DeptName = "泌尿外科", WindowRegisterCount = 6, WindowSettleCount = 1, BedSideRegisterCount = 42, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "10", DeptName = "泌尿外科", WindowRegisterCount = 12, WindowSettleCount = 21, BedSideRegisterCount = 12, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "11", DeptName = "泌尿外科", WindowRegisterCount = 53, WindowSettleCount = 31, BedSideRegisterCount = 20, BedSideSettleCount = 12 },
        new HourlyData { Date = "2022-01-01", Hour = "12", DeptName = "泌尿外科", WindowRegisterCount = 55, WindowSettleCount = 22, BedSideRegisterCount = 30, BedSideSettleCount = 9 },
        new HourlyData { Date = "2022-01-01", Hour = "13", DeptName = "泌尿外科", WindowRegisterCount = 4, WindowSettleCount = 7, BedSideRegisterCount = 12, BedSideSettleCount = 40 },
        new HourlyData { Date = "2022-01-01", Hour = "14", DeptName = "泌尿外科", WindowRegisterCount = 5, WindowSettleCount = 4, BedSideRegisterCount = 42, BedSideSettleCount = 20 },
        new HourlyData { Date = "2022-01-01", Hour = "15", DeptName = "泌尿外科", WindowRegisterCount = 6, WindowSettleCount = 1, BedSideRegisterCount = 42, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "16", DeptName = "泌尿外科", WindowRegisterCount = 12, WindowSettleCount = 21, BedSideRegisterCount = 12, BedSideSettleCount = 10 },
        new HourlyData { Date = "2022-01-01", Hour = "17", DeptName = "泌尿外科", WindowRegisterCount = 53, WindowSettleCount = 31, BedSideRegisterCount = 20, BedSideSettleCount = 12 },
        new HourlyData { Date = "2022-01-01", Hour = "18", DeptName = "泌尿外科", WindowRegisterCount = 55, WindowSettleCount = 22, BedSideRegisterCount = 30, BedSideSettleCount = 9 }
    };

    
    public class DeptUsageData
    {
        public string DeptName { get; set; }
        public float BedSideRegisterRate { get; set; }
        public float BedSideSettleRate { get; set; }
    }
    public List<DeptUsageData> DeptUsage { get; set; } = new List<DeptUsageData>
    {
        new DeptUsageData(){ DeptName = "心血管内科", BedSideRegisterRate = 11.54f, BedSideSettleRate = 10.23f },
        new DeptUsageData(){ DeptName = "消化内科", BedSideRegisterRate = 21.54f, BedSideSettleRate = 3.23f },
        new DeptUsageData(){ DeptName = "泌尿外科", BedSideRegisterRate = 1.54f, BedSideSettleRate = 5.23f },
        new DeptUsageData(){ DeptName = "急诊科", BedSideRegisterRate = 5.54f, BedSideSettleRate = 6.23f },
        new DeptUsageData(){ DeptName = "胃肠科", BedSideRegisterRate = 6.54f, BedSideSettleRate = 11.23f },
        new DeptUsageData(){ DeptName = "普外科", BedSideRegisterRate = 7.54f, BedSideSettleRate = 12.23f },
        new DeptUsageData(){ DeptName = "耳鼻喉科", BedSideRegisterRate = 21.54f, BedSideSettleRate = 29.23f },
        new DeptUsageData(){ DeptName = "眼科", BedSideRegisterRate = 0.54f, BedSideSettleRate = 6.23f },
        new DeptUsageData(){ DeptName = "口腔科", BedSideRegisterRate = 31.54f, BedSideSettleRate = 3.23f },
        
    };


   

    private List<HourlyData2> gg = new List<HourlyData2>();

    protected override Task OnInitializedAsync()
    {
        int bedSideRegisterCount = hourly.Sum(x => x.BedSideRegisterCount);
        int windowRegisterCount = hourly.Sum(x => x.WindowRegisterCount);
        int bedSideSettleCount = hourly.Sum(x => x.BedSideSettleCount);
        int windowSettleCount = hourly.Sum(x => x.WindowSettleCount);

        int totalRegisterCount = hourly.Sum(x => x.WindowRegisterCount + x.BedSideRegisterCount);
        int totalSettleCount = hourly.Sum(x => x.WindowSettleCount + x.BedSideSettleCount);

        var g = (from a in hourly
            group a by a.Hour
            into aa
            select new HourlyData2()
            {
                Hour = aa.Key,
                WindowRegisterCount = aa.Sum(bb => bb.WindowRegisterCount),
                WindowSettleCount = aa.Sum(bb => bb.WindowSettleCount),
                BedSideRegisterCount = aa.Sum(bb => bb.BedSideRegisterCount),
                BedSideSettleCount = aa.Sum(bb => bb.BedSideSettleCount),
            }).ToList();
        gg = g;
        Console.WriteLine(g);
        return base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
    // Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);

        int bedSideRegisterCount = hourly.Sum(x => x.BedSideRegisterCount);
        int windowRegisterCount = hourly.Sum(x => x.WindowRegisterCount);
        int bedSideSettleCount = hourly.Sum(x => x.BedSideSettleCount);
        int windowSettleCount = hourly.Sum(x => x.WindowSettleCount);

        int totalRegisterCount = hourly.Sum(x => x.WindowRegisterCount + x.BedSideRegisterCount);
        int totalSettleCount = hourly.Sum(x => x.WindowSettleCount + x.BedSideSettleCount);

        var g = from a in hourly
            group a by a.Hour
            into aa
            select new
            {
                WindowRegisterCount = aa.Sum(bb => bb.WindowRegisterCount),
                WindowSettleCount = aa.Sum(bb => bb.WindowSettleCount),
                BedSideRegisterCount = aa.Sum(bb => bb.BedSideRegisterCount),
                BedSideSettleCount = aa.Sum(bb => bb.BedSideSettleCount),
            };
        Console.WriteLine(g);
    }

    public class FunnelData
    {
        public string InterviewProcess { get; set; }
        public double Candidates { get; set; }
        public string DataLabelMappingName { get; set; }
    }

    public List<FunnelData> FunnelChartPoints { get; set; } = new List<FunnelData>
    {
        new FunnelData { InterviewProcess = "Hired", Candidates = 99, DataLabelMappingName = "Hired: 55" },
        new FunnelData { InterviewProcess = "Personal Interview", Candidates = 58, DataLabelMappingName = "Personal Interview: 58" },
        new FunnelData { InterviewProcess = "Telephonic Interview", Candidates = 85, DataLabelMappingName = "Telephonic Interview: 85" },
        new FunnelData { InterviewProcess = "Screening", Candidates = 105, DataLabelMappingName = "Screening: 105" },
        new FunnelData { InterviewProcess = "Initial Validation", Candidates = 145, DataLabelMappingName = "Initial Validation: 145" },
        new FunnelData { InterviewProcess = "Candidates Applied", Candidates = 10, DataLabelMappingName = "Candidates Applied: 250" },
    };

    private class HourlyData
    {
        public string Date { get; set; }
        public string Hour { get; set; }
        public string DeptName { get; set; }

        public int WindowSettleCount { get; set; }
        public int BedSideSettleCount { get; set; }

        public int WindowRegisterCount { get; set; }
        public int BedSideRegisterCount { get; set; }
    }

    private class HourlyData2
    {
        public string Hour { get; set; }

        public int WindowSettleCount { get; set; }
        public int BedSideSettleCount { get; set; }

        public int WindowRegisterCount { get; set; }
        public int BedSideRegisterCount { get; set; }
    }

    private class TransactionData
    {
        public string Category { get; set; }
        public string Description { get; set; }
        public string PaymentMode { get; set; }
        public string IconCss { get; set; }
        public string TransactoinId { get; set; }
        public bool IsIncome { get; set; }
        public bool IsExpense { get; set; }
        public int Amount { get; set; }
    }

}


<style> 
	.e-dashboardlayout {
		padding: 10px;
	}

	.e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
		line-height: 40px;
		height: 40px;
	}

	.fluent .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.fluent-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header{
		height: 56px;
	}

	.bootstrap5 .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.bootstrap5-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.tailwind .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.fluent .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.fluent-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.tailwind-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header{
		line-height: inherit;
	}

	.root-container {
		height: 100%;
	}

	.title {
		font-size: 18px;
		font-weight: 400;
	}

	.category-text {
		float: left;
		line-height: 30px;
	}

	.category-icon {
		float: left;
		background-repeat: no-repeat;
		background-position-x: center;
		background-size: 100%;
		height: 30px;
		width: 30px;
		display: inline-block;
		margin-right: 10px;
	}

	.item-container {
		display: flex;
		text-align: center;
		height: 70%;
		padding: 2rem;
		font-size: 22px;
		font-weight: 400;
	}

		.item-container.bed-side-settle {
			color: #17a00e
		}

		.item-container.bed-side-register {
			color: #008cff;
		}

		.item-container.window-settle {
			color: #f41127;
		}

		.item-container.window-register {
			color: #ca765a;
		}
		.item-container.expense {
            color: #aa00ff;
        }

	.bottom-container {
		text-align: center;
		font-weight: 400;
		font-size: 16px;
	}
    .mobile .bottom-container {
        font-size: 30px;
    }

	.material .bottom-container,
	.fabric .bottom-container,
	.bootstrap .bottom-container,
	.bootstrap4 .bottom-container,
	.tailwind .bottom-container,
	.bootstrap5 .bottom-container{
		color: #4c5258;
    }

	.amt-payment.expense-payment {
		font-weight: bold;
		color: #ff5e65;
	}

	.amt-payment.income-payment {
		font-weight: bold;
		color: #04cd93;
	}

	.auto-left {
		margin-left: auto;
	}

	.e-panel-cotent {
		padding: 1rem;
	}

	@@font-face {
		font-family: 'e-sb-icons';
		src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format("truetype");
		font-weight: normal;
		font-style: normal;
	}

	.bed-side-settle:after {
		content: "\e900";
		font-size: 24px;
		font-family: "e-sb-icons";
	}

	.expense:after {
		content: "\e901";
		font-size: 24px;
		font-family: "e-sb-icons";
	}

	.bed-side-register:after {
		content: "\e902";
		font-size: 24px;
		font-family: "e-sb-icons";
	}

	.window-register:after {
		content: "\e903";
		font-size: 24px;
		font-family: "e-sb-icons";
	}
	.window-settle:after {
    		content: "\e903";
    		font-size: 24px;
    		font-family: "e-sb-icons";
    }
    	

	.e-headercelldiv span.e-headertext {
		font-size: 14px;
		font-weight: 500;
	}

	.e-grid .e-rowcell {
		font-size: 13px;
	}
    .mobile .e-control.e-lib.e-dashboardlayout.e-responsive {
        z-index: 0;
        overflow: scroll;
    }
    .mobile .item-container {
        padding: 40px;
        font-size: 40px;
    }
    .mobile .balance:after {
        content: "\e900";
        font-size: 40px;
        font-family: "e-sb-icons";
    }

    .mobile .expense:after {
        content: "\e901";
        font-size: 40px;
        font-family: "e-sb-icons";
    }

    .mobile .income:after {
        content: "\e902";
        font-size: 40px;
        font-family: "e-sb-icons";
    }

    .mobile .transaction:after {
        content: "\e903";
        font-size: 40px;
        font-family: "e-sb-icons";
    }

    .e-control.e-lib.e-dashboardlayout.e-responsive {
        z-index: 0;
    }

	.e-dashboardlayout.e-control .e-panel .e-panel-container .e-grid.sf-grid .e-gridcontent .e-content.e-yscroll {
		overflow: auto;
	}

	body.tailwind-dark .e-dashboardlayout.e-control .e-panel {
		border: 1px #435266 solid;
	}

	.e-gridheader {
		padding-right: 0px !important;
	}
</style>